setwd("..")
credit <- read.csv("german.csv")
head(credit)
names(credit)[1] <- "checking_balance"
table(credit$checking_balance)
table(credit$default)
prop.table(table(credit$default))
set.seed(123) # 같은 PC에서 동일한 난수를 생성
train_sample <- sample(1000, 900)
str(train_sample)
train <- credit[train_sample,]
test <- credit[-train_sample,]
# test 셋과 train 셋에서의 목표변수 default의 비율확인
prop.table(table(train$default))
prop.table(table(test$default))
library(C50)
library(dplyr)
m <- C5.0(train %>% select(-default), as.factor(train$default)) # 의사 결정 변수는 제외해야 한다.
summary(m)
setwd("../decision_tree")
setwd("C:/data_minig/decision_tree")
setwd("C:/data_mining/decision_tree")
credit <- read.csv("german.csv")
head(credit)
names(credit)[1] <- "checking_balance"
table(credit$checking_balance)
table(credit$default)
prop.table(table(credit$default))
set.seed(123) # 같은 PC에서 동일한 난수를 생성
train_sample <- sample(1000, 900)
str(train_sample)
train <- credit[train_sample,]
test <- credit[-train_sample,]
# test 셋과 train 셋에서의 목표변수 default의 비율확인
prop.table(table(train$default))
prop.table(table(test$default))
library(C50)
library(dplyr)
m <- C5.0(train %>% select(-default), as.factor(train$default)) # 의사 결정 변수는 제외해야 한다.
summary(m)
plot(M)
plot(m)
# 모델의 일반화 능력 predict(모델, 테스트데이터)
test$p <- predict(m, test)
table(table$default, test$p)
table(test$default, test$p)
cf.mat <- table(test$default, test$p)
# 데이터에 모델을 붙일 때 사용하는 패키지,gmodels
install.packages("gmodels")
# 데이터에 모델을 붙일 때 사용하는 패키지,gmodels
library(gmodels)
CrossTable(test$default, test$p)
# 비용을 정의하여 준다
#
#          정답_no     정답_yes
# 예측_no      0             4
# 예측_yes     1             0
#
cost <- matrix(c(0, 1, 4, 0), by=c(2, 2))
cost
# 비용을 정의하여 준다
#
#          정답_no     정답_yes
# 예측_no      0             4
# 예측_yes     1             0
#
cost <- matrix(c(0, 1, 4, 0), nrow=2)
cost
colnames(cost) <- rownames(cost) <- c("no", "yes") # matrix_dimensions <- list(c("no", "yes"), c("no", "yes"))
colnames(cost) <- rownames(cost) <- c("no", "yes")
cost
# 비용을 정의하여 준다
#
#          정답_no     정답_yes
# 예측_no      0             4
# 예측_yes     1             0
#
cost <- matrix(c(0, 1, 4, 0), nrow=2)
matrix_dimensions <- list(c("no", "yes"), c("no", "yes")); names(matrix_dimensions) <- c("predicted", "actual");
cost <- matrix(c(0, 1, 4, 0), nrow = 2, dimnames = matrix_dimensions)
cost
cost_model <- C5.0(train[21], as.factor(train$default), costs=cost)
summary(cost_model)
cost
cost
cost_model
as.factor(train$default)
# 간단하게
cost <- matrix(c(0, 1, 4, 0), nrow=2);
cost_model <- C5.0(train[21], as.factor(train$default), costs=cost)
summary(cost_model)
cost
summary(cost_model)
cost_model <- C5.0(train[-21], as.factor(train$default), costs=cost)
summary(cost_model)
ls
