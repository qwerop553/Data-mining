tuneGrid = customGrid,
verbose = T,
importance = TRUE)
customGrid <- expand.grid(mtry = 1:15, ntree = 1:100)tree = 1:100)
customGrid <- expand.grid(mtry = 1:15, ntree = 1:100)tree = 1:100)
customGrid <- expand.grid(mtry = 1:15, ntree = 1:100)
customGrid
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = customGrid,
verbose = T,
importance = TRUE)
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = customGrid,
verbose = T,
importance = TRUE)
custom_Grid <- expand.grid(mtry = 1:15, ntree = 1:100)
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_Grid,
verbose = T,
importance = TRUE)
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneLength = 10,
verbose = T,
importance = TRUE)
class_rf
custom_grid <- expand.grid(mtry=1:15, ntree=1:100)
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_grid,
verbose = T,
importance = TRUE)
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
mtry = 1:15,
ntree = 1:500,
verbose = T,
importance = TRUE)
custom_grid <- expand.grid(ntree=1:100)
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_grid,
verbose = T,
importance = TRUE)
cv_ctrl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 5)
custom_grid <- expand.grid(.mtry=1:15,
.ntree=1:100)
custom_grid
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_grid,
verbose = T,
importance = TRUE)
custom_grid <- expand.grid(.mtry=1:15,
.ntree=1:100)
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_grid,
verbose = T,
importance = TRUE)
custom_grid <- expand.grid(.mtry = seq(1, 15, 1)
.ntree = seq(1, 100, 1))
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_grid,
verbose = T,
importance = TRUE)
custom_grid <- expand.grid(.mtry = seq(1, 15, 1),
.ntree = seq(1, 100, 1))
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_grid,
verbose = T,
importance = TRUE)
class_rf
cv_ctrl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
custom_grid <- expand.grid(.mtry = seq(1, 15, 1),
.ntree = seq(1, 100, 1))
rslt
rslt
custom_grid <- expand.grid(.mtry = seq(1, 15, 1),
.ntree = seq(1, 100, 1))
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_grid,
verbose = T,
importance = TRUE)
# ----- offset -----
rm(list=ls(all.names = TRUE))
library(tidyverse)
library(janitor)
library(ggridges)
library(cowplot)
library(caret)
library(tidypredict)
library(skimr)
library(Information)
library(car)
library(randomForest)
library(ipred)
f_v <- dir(pattern = 'homework', recursive = TRUE)
for(i in 1:length(f_v)){
.tb <- read.csv(f_v[i], stringsAsFactors = FALSE)
.tb <- .tb %>% clean_names()
.tb$date1 <- str_replace_all(.tb$date1, "[AM|PM]", "")
.tb$date1 <- as.POSIXct(strptime(.tb$date1, "%Y-%m-%d %H:%M"))
assign(paste0('table', i), .tb)
}
for(i in 1:length(f_v)){
.tb_name <- paste0('table', i)
.tb <- get(.tb_name)
.tb1 <- .tb[c(min(which(.tb$item == "집도과1")),
min(which(.tb$item == "마취방법(주)")),
min(which(.tb$item == "신체적상태")),
min(which(.tb$item == "수술구분")),
min(which(.tb$item == "수술(전) 진단명")),
min(which(.tb$item == "수술체위"))),]
.tb1 <- .tb1 %>% select(item, value1) %>% spread(item, value1)
.tb2 <- .tb[c(which(.tb$group %in% c( "Inhalational Agent",
"Intravenous Agent",
"V/S")),
which(.tb$item == "마취시작일시")),]
.tb2 <- .tb2 %>% arrange(date1, item)
.inhal <- .tb2[min(which(.tb2$group == 'Inhalational Agent')),]
.inhal <- cbind(.inhal, data.frame(type=c("inhal")))
.inhal <- .inhal %>% select(type, item) %>% spread(type, item)
.intra <- .tb2[min(which(.tb2$group == 'Intravenous Agent')),]
.intra <- cbind(.intra, data.frame(type=c("intra")))
.intra <- .intra %>% select(type, item) %>% spread(type, item)
.tb2 <- .tb2[1:(which(.tb2$item=="마취시작일시")-1),]
.tb2 <- .tb2[c(min(which(.tb2$item == "BIS")),
min(which(.tb2$item == "HR (BPM)")),
min(which(.tb2$item == "NBP-D(mmHg)")),
min(which(.tb2$item == "NBP-M(mmHg)")),
min(which(.tb2$item == "NBP-S(mmHg)")),
min(which(.tb2$item == "SPO2 (%)")),
min(which(.tb2$item == "TOF Count")),
min(which(.tb2$item == "TOF ratio(%)"))),]
.tb2 <- .tb2 %>% select(item, value1) %>% na.omit()
if(!("BIS" %in% .tb2$item)) .tb2 <- rbind(.tb2, data.frame(item="BIS", value1="<NA>"))
if(!("HR (BPM)" %in% .tb2$item)) .tb2 <- rbind(.tb2, data.frame(item="HR (BPM)", value1="<NA>"))
if(!("NBP-D(mmHg)" %in% .tb2$item)) .tb2 <- rbind(.tb2, data.frame(item="NBP-D(mmHg)", value1="<NA>"))
if(!("NBP-M(mmHg)" %in% .tb2$item)) .tb2 <- rbind(.tb2, data.frame(item="NBP-M(mmHg)", value1="<NA>"))
if(!("NBP-S(mmHg)" %in% .tb2$item)) tb2 <- rbind(.tb2, data.frame(item="NBP-S(mmHg)", value1="<NA>"))
if(!("SPO2 (%)" %in% .tb2$item)) .tb2 <- rbind(.tb2, data.frame(item="SPO2 (%)", value1="<NA>"))
if(!("TOF Count" %in% .tb2$item)) .tb2 <- rbind(.tb2, data.frame(item="TOF Count", value1="<NA>"))
if(!("TOF ratio(%)" %in% .tb2$item)) .tb2 <- rbind(.tb2, data.frame(item="TOF ratio(%)", value1="<NA>"))
.tb2 <- .tb2 %>% select(item, value1) %>% spread(item, value1)
.class <- data.frame(class=.tb$class[1])
assign(paste0(.tb_name, '_rslt'), cbind(.tb1, .tb2, .intra, .inhal, .class))
}
rslt <- data.frame()
for(i in 1:length(f_v)){
.rslt_name <- paste0("table", i, "_rslt")
rslt <- rbind(rslt, get(.rslt_name))
}
rslt <- rslt %>% clean_names()
rslt$bis <- as.integer(rslt$bis)
rslt$hr_bpm <- as.integer(rslt$hr_bpm)
rslt$nbp_d_mm_hg <- as.integer(rslt$nbp_d_mm_hg)
rslt$nbp_s_mm_hg <- as.integer(rslt$nbp_s_mm_hg)
rslt$nbp_m_mm_hg <- as.integer(rslt$nbp_m_mm_hg)
rslt$spo2_percent <- as.integer(rslt$spo2_percent)
rslt$tof_count <- as.integer(rslt$tof_count)
rslt$tof_ratio_percent <- as.integer(rslt$tof_ratio_percent)
rslt$class <- factor(rslt$class)
rslt$spo2_percent[rslt$spo2_percent==1100] <- 100 # 이상값 변환
rslt_list <- partition(skim(rslt))
y_p <- rslt %>%
ggplot(aes(x = class, fill = class)) +
geom_bar(alpha = 0.8) +
scale_fill_manual(values = c("gray", "red")) +
guides(fill = FALSE)
x_cont_p <- rslt %>%
select(class, rslt_list$numeric$skim_variable) %>%
gather(variable, value, -class) %>%
mutate(value = as.integer(value)) %>%
ggplot(aes(x = value, y = class, fill = class)) +
facet_wrap( ~ variable, scale = "free", ncol = 3) +
scale_fill_manual(values = c("gray", "red")) +
geom_density_ridges(alpha = 0.8) +
guides(fill = FALSE, color = FALSE)
plot_grid(y_p, x_cont_p, rel_widths = c(1,3))
plot_grid(y_p, x_cont_p, rel_widths = c(1,3))
x_cat_p <- rslt %>%
select(class, rslt_list$character$skim_variable, rslt_list$factor$skim_variable) %>%
gather(variable, value, -class) %>%
group_by(class) %>%
count(variable, value) %>%
ungroup() %>%
ggplot(data = ., aes(x=value, y=n, fill=class)) +
geom_col(position="dodge", width=0.7) +
facet_wrap(~variable, scale = "free", ncol = 4) +
scale_fill_manual(values = c("gray", "red")) +
guides(fill = FALSE, color = FALSE)
plot_grid(y_p, x_cat_p, rel_widths = c(1,3))
# ----- 3. 데이터 변환 -----
rslt$status1 <- factor(ifelse(rslt$신체적상태 == "1.전신질환이 없는 건강한 환자", 1, 0))
rslt$status2 <- factor(ifelse(rslt$신체적상태 == "2.경도나 중등도의 전신 질환이 있는 환자", 1, 0))
rslt$status3 <- factor(ifelse(rslt$신체적상태 == "3.일상 생활에 제약을 주는 고도의 전신 질환이 있는 환자", 1, 0))
rslt$신체적상태 <- NULL
rslt$cholecystitis <- factor(ifelse(str_detect(rslt$수술_전_진단명, "cholecystitis"), 1, 0))
rslt$gb <- factor(ifelse(str_detect(rslt$수술_전_진단명, "[gallbladder|GB]"), 1, 0))
rslt$polyp <- factor(ifelse(str_detect(rslt$수술_전_진단명, "Polyp"), 1, 0))
rslt$acute <- factor(ifelse(str_detect(rslt$수술_전_진단명, "[a|A]cute"), 1, 0))
rslt$adenomyomatosis <- factor(ifelse(str_detect(rslt$수술_전_진단명, "adenomyomatosis"), 1, 0))
rslt$cancer <- factor(ifelse(str_detect(rslt$수술_전_진단명, "[C|c]ancer"), 1, 0))
rslt$수술_전_진단명 <- NULL
rslt_list <- partition(skim(rslt))
x_cat_p <- rslt %>%
select(class, rslt_list$factor$skim_variable, rslt_list$character$skim_variable) %>%
gather(variable, value, -class) %>%
group_by(class) %>%
count(variable, value) %>%
ungroup() %>%
ggplot(data = ., aes(x=value, y=n, fill=class)) +
geom_col(position="dodge", width=0.7) +
facet_wrap(~variable, scale = "free", ncol = 4) +
scale_fill_manual(values = c("gray", "red")) +
guides(fill = FALSE, color = FALSE)
plot_grid(y_p, x_cat_p, rel_widths = c(1,3))
rslt$inhal <- NULL
rslt$intra <- NULL
rslt$cancer <- NULL
rslt$수술구분 <- NULL
rslt$마취방법_주 <- NULL
rslt$수술체위 <- NULL
rslt$집도과1 <- NULL
rslt$gb <- NULL
rslt_iv_df <- rslt %>%
mutate(class = as.integer(class) - 1)
rslt_iv <- create_infotables(data=rslt_iv_df, y='class', bins=10, parallel = T)
rslt_iv$Summary %>%
mutate(Variable = fct_reorder(Variable, IV)) %>%
ggplot(aes(x=Variable, y=IV)) +
geom_col() +
coord_flip()
folds <- createFolds(rslt$class, k = 10, list = TRUE, returnTrain = T)
cv_test1 <-  lapply(folds,  function(x){
train_df <- rslt[x,]
test_df <- rslt[-x,]
class_glm1 <- glm(class ~ nbp_m_mm_hg + nbp_s_mm_hg + nbp_d_mm_hg, data=train_df,
family = 'binomial')
test_df1 <- test_df %>%
tidypredict_to_column(class_glm1) %>%
mutate(pred_class = ifelse(fit > 0.5, "normal", "hypotension") %>% as.factor)
confusionMatrix(table(test_df$class, test_df1$pred_class))$overall['Accuracy']
})
cv_test1
mean(unlist(cv_test1))
sd(unlist(cv_test1))/mean(unlist(cv_test1))
class_glm1 <- glm(class ~ nbp_m_mm_hg + nbp_s_mm_hg + nbp_d_mm_hg, data=rslt,
family = 'binomial')
vif(class_glm1)
## 2
cv_test2 <-  lapply(folds,  function(x){
train_df <- rslt[x,]
test_df <- rslt[-x,]
class_glm2 <-  glm(class ~  nbp_s_mm_hg + nbp_d_mm_hg, data=train_df,
family = 'binomial')
test_df1 <- test_df %>%
tidypredict_to_column(class_glm2) %>%
mutate(pred_class = ifelse(fit > 0.5, "normal", "hypotension") %>% as.factor)
confusionMatrix(table(test_df$class, test_df1$pred_class))$overall['Accuracy']
})
cv_test2
mean(unlist(cv_test2))
sd(unlist(cv_test2))/mean(unlist(cv_test2))
class_glm2 <-  glm(class ~  nbp_s_mm_hg + nbp_d_mm_hg, data=rslt,
family = 'binomial')
vif(class_glm2)
cv_test3 <-  lapply(folds,  function(x){
train_df <- rslt[x,]
test_df <- rslt[-x,]
class_glm3 <- glm(class ~  nbp_s_mm_hg + nbp_d_mm_hg + hr_bpm , data=train_df,
family = 'binomial')
test_df1 <- test_df %>%
tidypredict_to_column(class_glm3) %>%
mutate(pred_class = ifelse(fit > 0.5, "normal", "hypotension") %>% as.factor)
confusionMatrix(table(test_df$class, test_df1$pred_class))$overall['Accuracy']
})
cv_test3
mean(unlist(cv_test3))
sd(unlist(cv_test3))/mean(unlist(cv_test3))
class_glm3 <- glm(class ~  nbp_s_mm_hg + nbp_d_mm_hg + hr_bpm , data=rslt,
family = 'binomial')
vif(class_glm3)
## 4
cv_test4 <-  lapply(folds,  function(x){
train_df <- rslt[x,]
test_df <- rslt[-x,]
class_glm4 <- glm(class ~ nbp_s_mm_hg + nbp_d_mm_hg + hr_bpm + cholecystitis, data=train_df,
family = 'binomial')
test_df1 <- test_df %>%
tidypredict_to_column(class_glm4) %>%
mutate(pred_class = ifelse(fit > 0.5, "normal", "hypotension") %>% as.factor)
confusionMatrix(table(test_df$class, test_df1$pred_class))$overall['Accuracy']
})
cv_test4
mean(unlist(cv_test4))
sd(unlist(cv_test4))/mean(unlist(cv_test4))
class_glm4 <- glm(class ~ nbp_s_mm_hg + nbp_d_mm_hg + hr_bpm + cholecystitis, data=rslt,
family = 'binomial')
vif(class_glm4)
## 5
cv_test5 <-  lapply(folds,  function(x){
train_df <- rslt[x,]
test_df <- rslt[-x,]
class_glm5 <- glm(class ~ nbp_s_mm_hg + nbp_d_mm_hg + nbp_m_mm_hg + cholecystitis + hr_bpm , data=train_df,
family = 'binomial')
test_df1 <- test_df %>%
tidypredict_to_column(class_glm5) %>%
mutate(pred_class = ifelse(fit > 0.5, "normal", "hypotension") %>% as.factor)
confusionMatrix(table(test_df$class, test_df1$pred_class))$overall['Accuracy']
})
cv_test5
mean(unlist(cv_test5))
sd(unlist(cv_test5))/mean(unlist(cv_test5))
mean(unlist(cv_test3))
## 5
cv_test5 <-  lapply(folds,  function(x){
train_df <- rslt[x,]
test_df <- rslt[-x,]
class_glm5 <- glm(class ~ nbp_s_mm_hg + nbp_d_mm_hg + nbp_m_mm_hg + cholecystitis + hr_bpm , data=train_df,
family = 'binomial')
test_df1 <- test_df %>%
tidypredict_to_column(class_glm5) %>%
mutate(pred_class = ifelse(fit > 0.5, "normal", "hypotension") %>% as.factor)
confusionMatrix(table(test_df$class, test_df1$pred_class))$overall['Accuracy']
})
cv_test5
mean(unlist(cv_test5))
sd(unlist(cv_test5))/mean(unlist(cv_test5))
class_glm5 <- glm(class ~ nbp_s_mm_hg + nbp_d_mm_hg + nbp_m_mm_hg + hr_bpm + cholecystitis, data=rslt,
family = 'binomial')
vif(class_glm5)
fitControl <- trainControl(method = 'repeatedcv', number = 6, repeats = 5)
rslt <- rslt %>% na.omit()
rf_fit <- train(class~., data = rslt, method = 'rf', trControl = fitControl, verbose = T, parallel=F)
registerDoSEQ()
rf_fit <- train(class~., data = rslt, method = 'rf', trControl = fitControl, verbose = T, parallel=F)
?registerDoSEQ
foreach::registerDoSEQ()
rf_fit <- train(class~., data = rslt, method = 'rf', trControl = fitControl, verbose = T, parallel=F)
rf_fit
foreach::registerDoSEQ()
index_train <- createDataPartition(rslt$class, p = 0.8, list = FALSE)
train_df <- rslt[index_train,]
test_df <- rslt[-index_train,]
cv_ctrl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
custom_grid <- expand.grid(.mtry = seq(1, 15, 1),
.ntree = seq(1, 100, 1))
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_grid,
verbose = T,
importance = TRUE)
setwd("c:/data_mining")
credit <- read.csv("decision_tree/german.csv")
credit$default <- as.factor(credit$default)
library(randomForest)
# 부스팅 트리와 비교
library(caret)
ctrl <- trainControl(method = 'repeatedcv',
number = 10, repeats = 10)
# 변수 수 설정
grid_rf <- expand.grid(.mtry = c(2, 4, 8, 16))
set.seed(300)
m_rf <- train(default~., data=credit, method='rf',
metric = "Kappa", trControl = ctrl,
tuneGrid=grid_rf)
custom_grid <- expand.grid(.mtry = 1:15)
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_grid,
verbose = T,
importance = TRUE)
class_rf
custom_grid <- expand.grid(.ntree = 1:100,
.mtry = 1:15)
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_grid,
verbose = T,
importance = TRUE)
cv_ctrl <- trainControl(method = 'repeatedcv',
number = 3,
repeats = 3,
serach = 'random')
cv_ctrl <- trainControl(method = 'repeatedcv',
number = 3,
repeats = 3,
search = 'random')
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneLength = 15,
importance = TRUE
)
class_vip <- varImp(class_rf)
important_variable <- class_vip$importance %>%
rownames_to_column("variable") %>%
top_n(10, wt="hypotension")
important_variable
important_variable <- class_vip$importance %>%
rownames_to_column("variable") %>%
top_n(10, wt="hypotension") %>%
pull(variable)
important_variable
which_two_pcnt <- tolerance(class_rf, metric = "ROC",
tol = 2, maximize = TRUE)
which_two_pcnt <- tolerance(class_rf$results, metric = "ROC",
tol = 2, maximize = TRUE)
which_two_pcnt <- tolerance(class_rf$results, metric = "ROC",
tol = 1, maximize = TRUE)
important_variable <- class_vip$importance %>%
rownames_to_column("variable") %>%
top_n(10, wt="hypotension") %>%
pull(variable)
important_variable
important_variable <- class_vip$importance %>%
rownames_to_column("variable") %>%
top_n(10, wt="hypotension")
important_variable
vip(class_rf$finalModel, num_features=10L,
width = 0.5, fill = 'green3', color = 'green1')
library(vip)
vip(class_rf$finalModel, num_features=10L,
width = 0.5, fill = 'green3', color = 'green1')
class_rf
important_variable
custom_grid <- expand.grid(.ntry=1:15)
table(predict(class_rf, test_df), test_df$class)
rslt <- rslt %>% na.omit()
custom_grid <- expand.grid(.ntry=1:15)
cv_ctrl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_grid,
verbose = T,
importance = TRUE)
custom_grid <- expand.grid(.mtry=1:15)
cv_ctrl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
class_rf <- train(class~., data = train_df,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_grid,
verbose = T,
importance = TRUE)
class_rf <- train(class~., data = rslt,
method = 'rf',
trControl = cv_ctrl,
tuneGrid = custom_grid,
verbose = T,
importance = TRUE)
class_rf
##6
cv_test6 <-  lapply(folds,  function(x){
train_df <- rslt[x,]
test_df <- rslt[-x,]
class_glm5 <- glm(class ~ nbp_s_mm_hg + nbp_d_mm_hg + nbp_m_mm_hg + cholecystitis + hr_bpm + bis, data=train_df,
family = 'binomial')
test_df1 <- test_df %>%
tidypredict_to_column(class_glm6) %>%
mutate(pred_class = ifelse(fit > 0.5, "normal", "hypotension") %>% as.factor)
confusionMatrix(table(test_df$class, test_df1$pred_class))$overall['Accuracy']
})
##6
cv_test6 <-  lapply(folds,  function(x){
train_df <- rslt[x,]
test_df <- rslt[-x,]
class_glm6 <- glm(class ~ nbp_s_mm_hg + nbp_d_mm_hg + nbp_m_mm_hg + cholecystitis + hr_bpm + bis, data=train_df,
family = 'binomial')
test_df1 <- test_df %>%
tidypredict_to_column(class_glm6) %>%
mutate(pred_class = ifelse(fit > 0.5, "normal", "hypotension") %>% as.factor)
confusionMatrix(table(test_df$class, test_df1$pred_class))$overall['Accuracy']
})
cv_test6
mean(unlist(cv_test6))
sd(unlist(cv_test6))/mean(unlist(cv_test6))
vif(class_glm5)
rslt_list <- partition(skim(rslt))
